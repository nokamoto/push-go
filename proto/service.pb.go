// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/service.proto

/*
Package push is a generated protocol buffer package.

It is generated from these files:
	proto/service.proto

It has these top-level messages:
	FirebaseCloudMessagingApp
	Id
	FirebaseCloudMessagingEndpoint
	SetFirebaseCloudMessagingEndpoint
	DeleteFirebaseCloudMessagingEndpoint
	FirebaseCloudMessagingNotification
*/
package push

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FirebaseCloudMessagingApp struct {
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey" json:"api_key,omitempty"`
}

func (m *FirebaseCloudMessagingApp) Reset()                    { *m = FirebaseCloudMessagingApp{} }
func (m *FirebaseCloudMessagingApp) String() string            { return proto.CompactTextString(m) }
func (*FirebaseCloudMessagingApp) ProtoMessage()               {}
func (*FirebaseCloudMessagingApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FirebaseCloudMessagingApp) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FirebaseCloudMessagingEndpoint struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *FirebaseCloudMessagingEndpoint) Reset()                    { *m = FirebaseCloudMessagingEndpoint{} }
func (m *FirebaseCloudMessagingEndpoint) String() string            { return proto.CompactTextString(m) }
func (*FirebaseCloudMessagingEndpoint) ProtoMessage()               {}
func (*FirebaseCloudMessagingEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FirebaseCloudMessagingEndpoint) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SetFirebaseCloudMessagingEndpoint struct {
	Key   *Id                             `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *FirebaseCloudMessagingEndpoint `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SetFirebaseCloudMessagingEndpoint) Reset()         { *m = SetFirebaseCloudMessagingEndpoint{} }
func (m *SetFirebaseCloudMessagingEndpoint) String() string { return proto.CompactTextString(m) }
func (*SetFirebaseCloudMessagingEndpoint) ProtoMessage()    {}
func (*SetFirebaseCloudMessagingEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *SetFirebaseCloudMessagingEndpoint) GetKey() *Id {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetFirebaseCloudMessagingEndpoint) GetValue() *FirebaseCloudMessagingEndpoint {
	if m != nil {
		return m.Value
	}
	return nil
}

type DeleteFirebaseCloudMessagingEndpoint struct {
	Value *FirebaseCloudMessagingEndpoint `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *DeleteFirebaseCloudMessagingEndpoint) Reset()         { *m = DeleteFirebaseCloudMessagingEndpoint{} }
func (m *DeleteFirebaseCloudMessagingEndpoint) String() string { return proto.CompactTextString(m) }
func (*DeleteFirebaseCloudMessagingEndpoint) ProtoMessage()    {}
func (*DeleteFirebaseCloudMessagingEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *DeleteFirebaseCloudMessagingEndpoint) GetValue() *FirebaseCloudMessagingEndpoint {
	if m != nil {
		return m.Value
	}
	return nil
}

type FirebaseCloudMessagingNotification struct {
	Topic     string                                      `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Condition string                                      `protobuf:"bytes,2,opt,name=condition" json:"condition,omitempty"`
	Endpoint  []*FirebaseCloudMessagingEndpoint           `protobuf:"bytes,3,rep,name=endpoint" json:"endpoint,omitempty"`
	Payload   *FirebaseCloudMessagingNotification_Payload `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *FirebaseCloudMessagingNotification) Reset()         { *m = FirebaseCloudMessagingNotification{} }
func (m *FirebaseCloudMessagingNotification) String() string { return proto.CompactTextString(m) }
func (*FirebaseCloudMessagingNotification) ProtoMessage()    {}
func (*FirebaseCloudMessagingNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func (m *FirebaseCloudMessagingNotification) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *FirebaseCloudMessagingNotification) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *FirebaseCloudMessagingNotification) GetEndpoint() []*FirebaseCloudMessagingEndpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *FirebaseCloudMessagingNotification) GetPayload() *FirebaseCloudMessagingNotification_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

type FirebaseCloudMessagingNotification_Payload struct {
	Json string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
}

func (m *FirebaseCloudMessagingNotification_Payload) Reset() {
	*m = FirebaseCloudMessagingNotification_Payload{}
}
func (m *FirebaseCloudMessagingNotification_Payload) String() string {
	return proto.CompactTextString(m)
}
func (*FirebaseCloudMessagingNotification_Payload) ProtoMessage() {}
func (*FirebaseCloudMessagingNotification_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *FirebaseCloudMessagingNotification_Payload) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func init() {
	proto.RegisterType((*FirebaseCloudMessagingApp)(nil), "push.FirebaseCloudMessagingApp")
	proto.RegisterType((*Id)(nil), "push.Id")
	proto.RegisterType((*FirebaseCloudMessagingEndpoint)(nil), "push.FirebaseCloudMessagingEndpoint")
	proto.RegisterType((*SetFirebaseCloudMessagingEndpoint)(nil), "push.SetFirebaseCloudMessagingEndpoint")
	proto.RegisterType((*DeleteFirebaseCloudMessagingEndpoint)(nil), "push.DeleteFirebaseCloudMessagingEndpoint")
	proto.RegisterType((*FirebaseCloudMessagingNotification)(nil), "push.FirebaseCloudMessagingNotification")
	proto.RegisterType((*FirebaseCloudMessagingNotification_Payload)(nil), "push.FirebaseCloudMessagingNotification.Payload")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppService service

type AppServiceClient interface {
	SetFirebaseCloudMessaging(ctx context.Context, in *FirebaseCloudMessagingApp, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetFirebaseCloudMessaging(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FirebaseCloudMessagingApp, error)
}

type appServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppServiceClient(cc *grpc.ClientConn) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) SetFirebaseCloudMessaging(ctx context.Context, in *FirebaseCloudMessagingApp, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/push.AppService/SetFirebaseCloudMessaging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetFirebaseCloudMessaging(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FirebaseCloudMessagingApp, error) {
	out := new(FirebaseCloudMessagingApp)
	err := grpc.Invoke(ctx, "/push.AppService/GetFirebaseCloudMessaging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceServer interface {
	SetFirebaseCloudMessaging(context.Context, *FirebaseCloudMessagingApp) (*google_protobuf.Empty, error)
	GetFirebaseCloudMessaging(context.Context, *google_protobuf.Empty) (*FirebaseCloudMessagingApp, error)
}

func RegisterAppServiceServer(s *grpc.Server, srv AppServiceServer) {
	s.RegisterService(&_AppService_serviceDesc, srv)
}

func _AppService_SetFirebaseCloudMessaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirebaseCloudMessagingApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).SetFirebaseCloudMessaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.AppService/SetFirebaseCloudMessaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).SetFirebaseCloudMessaging(ctx, req.(*FirebaseCloudMessagingApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetFirebaseCloudMessaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetFirebaseCloudMessaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.AppService/GetFirebaseCloudMessaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetFirebaseCloudMessaging(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "push.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFirebaseCloudMessaging",
			Handler:    _AppService_SetFirebaseCloudMessaging_Handler,
		},
		{
			MethodName: "GetFirebaseCloudMessaging",
			Handler:    _AppService_GetFirebaseCloudMessaging_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

// Client API for FirebaseCloudMessagingEndpointService service

type FirebaseCloudMessagingEndpointServiceClient interface {
	Set(ctx context.Context, in *SetFirebaseCloudMessagingEndpoint, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Delete(ctx context.Context, in *DeleteFirebaseCloudMessagingEndpoint, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (FirebaseCloudMessagingEndpointService_GetClient, error)
}

type firebaseCloudMessagingEndpointServiceClient struct {
	cc *grpc.ClientConn
}

func NewFirebaseCloudMessagingEndpointServiceClient(cc *grpc.ClientConn) FirebaseCloudMessagingEndpointServiceClient {
	return &firebaseCloudMessagingEndpointServiceClient{cc}
}

func (c *firebaseCloudMessagingEndpointServiceClient) Set(ctx context.Context, in *SetFirebaseCloudMessagingEndpoint, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/push.FirebaseCloudMessagingEndpointService/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firebaseCloudMessagingEndpointServiceClient) Delete(ctx context.Context, in *DeleteFirebaseCloudMessagingEndpoint, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/push.FirebaseCloudMessagingEndpointService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firebaseCloudMessagingEndpointServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (FirebaseCloudMessagingEndpointService_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FirebaseCloudMessagingEndpointService_serviceDesc.Streams[0], c.cc, "/push.FirebaseCloudMessagingEndpointService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &firebaseCloudMessagingEndpointServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirebaseCloudMessagingEndpointService_GetClient interface {
	Recv() (*FirebaseCloudMessagingEndpoint, error)
	grpc.ClientStream
}

type firebaseCloudMessagingEndpointServiceGetClient struct {
	grpc.ClientStream
}

func (x *firebaseCloudMessagingEndpointServiceGetClient) Recv() (*FirebaseCloudMessagingEndpoint, error) {
	m := new(FirebaseCloudMessagingEndpoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FirebaseCloudMessagingEndpointService service

type FirebaseCloudMessagingEndpointServiceServer interface {
	Set(context.Context, *SetFirebaseCloudMessagingEndpoint) (*google_protobuf.Empty, error)
	Delete(context.Context, *DeleteFirebaseCloudMessagingEndpoint) (*google_protobuf.Empty, error)
	Get(*Id, FirebaseCloudMessagingEndpointService_GetServer) error
}

func RegisterFirebaseCloudMessagingEndpointServiceServer(s *grpc.Server, srv FirebaseCloudMessagingEndpointServiceServer) {
	s.RegisterService(&_FirebaseCloudMessagingEndpointService_serviceDesc, srv)
}

func _FirebaseCloudMessagingEndpointService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFirebaseCloudMessagingEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseCloudMessagingEndpointServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.FirebaseCloudMessagingEndpointService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseCloudMessagingEndpointServiceServer).Set(ctx, req.(*SetFirebaseCloudMessagingEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirebaseCloudMessagingEndpointService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirebaseCloudMessagingEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseCloudMessagingEndpointServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.FirebaseCloudMessagingEndpointService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseCloudMessagingEndpointServiceServer).Delete(ctx, req.(*DeleteFirebaseCloudMessagingEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirebaseCloudMessagingEndpointService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirebaseCloudMessagingEndpointServiceServer).Get(m, &firebaseCloudMessagingEndpointServiceGetServer{stream})
}

type FirebaseCloudMessagingEndpointService_GetServer interface {
	Send(*FirebaseCloudMessagingEndpoint) error
	grpc.ServerStream
}

type firebaseCloudMessagingEndpointServiceGetServer struct {
	grpc.ServerStream
}

func (x *firebaseCloudMessagingEndpointServiceGetServer) Send(m *FirebaseCloudMessagingEndpoint) error {
	return x.ServerStream.SendMsg(m)
}

var _FirebaseCloudMessagingEndpointService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "push.FirebaseCloudMessagingEndpointService",
	HandlerType: (*FirebaseCloudMessagingEndpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _FirebaseCloudMessagingEndpointService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FirebaseCloudMessagingEndpointService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _FirebaseCloudMessagingEndpointService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}

// Client API for FirebaseCloudMessagingService service

type FirebaseCloudMessagingServiceClient interface {
	Send(ctx context.Context, in *FirebaseCloudMessagingNotification, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type firebaseCloudMessagingServiceClient struct {
	cc *grpc.ClientConn
}

func NewFirebaseCloudMessagingServiceClient(cc *grpc.ClientConn) FirebaseCloudMessagingServiceClient {
	return &firebaseCloudMessagingServiceClient{cc}
}

func (c *firebaseCloudMessagingServiceClient) Send(ctx context.Context, in *FirebaseCloudMessagingNotification, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/push.FirebaseCloudMessagingService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FirebaseCloudMessagingService service

type FirebaseCloudMessagingServiceServer interface {
	Send(context.Context, *FirebaseCloudMessagingNotification) (*google_protobuf.Empty, error)
}

func RegisterFirebaseCloudMessagingServiceServer(s *grpc.Server, srv FirebaseCloudMessagingServiceServer) {
	s.RegisterService(&_FirebaseCloudMessagingService_serviceDesc, srv)
}

func _FirebaseCloudMessagingService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirebaseCloudMessagingNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseCloudMessagingServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.FirebaseCloudMessagingService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseCloudMessagingServiceServer).Send(ctx, req.(*FirebaseCloudMessagingNotification))
	}
	return interceptor(ctx, in, info, handler)
}

var _FirebaseCloudMessagingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "push.FirebaseCloudMessagingService",
	HandlerType: (*FirebaseCloudMessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _FirebaseCloudMessagingService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

func init() { proto.RegisterFile("proto/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0x34, 0x69, 0x06, 0x89, 0xc3, 0x50, 0x41, 0x6a, 0x28, 0x94, 0x55, 0x11, 0x15,
	0x07, 0xa7, 0x0a, 0x08, 0x09, 0x4e, 0x44, 0x50, 0x4a, 0x8b, 0xa8, 0x90, 0x23, 0x71, 0x45, 0x1b,
	0xef, 0x34, 0x2c, 0x31, 0xde, 0x55, 0xbc, 0xa9, 0x14, 0x71, 0xe6, 0x5f, 0xf1, 0xd3, 0x38, 0x20,
	0x7b, 0xed, 0x94, 0x43, 0xfc, 0xc1, 0xcd, 0x3b, 0x3b, 0xef, 0xcd, 0x7b, 0xb3, 0xcf, 0x70, 0x47,
	0x2f, 0x95, 0x51, 0xa3, 0x94, 0x96, 0xd7, 0x32, 0xa2, 0x20, 0x3f, 0x61, 0x57, 0xaf, 0xd2, 0x6f,
	0xfe, 0xfd, 0xb9, 0x52, 0xf3, 0x98, 0x46, 0x79, 0x6d, 0xb6, 0xba, 0x1a, 0xd1, 0x0f, 0x6d, 0xd6,
	0xb6, 0x85, 0xbd, 0x80, 0xfd, 0xf7, 0x72, 0x49, 0x33, 0x9e, 0xd2, 0xdb, 0x58, 0xad, 0xc4, 0x27,
	0x4a, 0x53, 0x3e, 0x97, 0xc9, 0x7c, 0xa2, 0x35, 0xde, 0x83, 0x3e, 0xd7, 0xf2, 0xeb, 0x82, 0xd6,
	0x43, 0xe7, 0xd0, 0x39, 0x1e, 0x84, 0x3d, 0xae, 0xe5, 0x47, 0x5a, 0xb3, 0x3d, 0x70, 0xcf, 0x05,
	0xde, 0x06, 0x57, 0x8a, 0xe2, 0xc6, 0x95, 0x82, 0xbd, 0x84, 0x87, 0xdb, 0xb9, 0x4e, 0x13, 0xa1,
	0x95, 0x4c, 0x0c, 0xee, 0xc1, 0x8e, 0x51, 0x0b, 0x4a, 0x0a, 0x90, 0x3d, 0xb0, 0x9f, 0xf0, 0x78,
	0x4a, 0xa6, 0x01, 0xea, 0x83, 0x57, 0xea, 0xb8, 0x35, 0xde, 0x0d, 0x32, 0x67, 0xc1, 0xb9, 0x08,
	0xb3, 0x22, 0xbe, 0x86, 0x9d, 0x6b, 0x1e, 0xaf, 0x68, 0xe8, 0xe6, 0xb7, 0x47, 0xf6, 0xb6, 0x9e,
	0x30, 0xb4, 0x10, 0x36, 0x83, 0xa3, 0x77, 0x14, 0x93, 0xa1, 0x86, 0xf9, 0x9b, 0x19, 0xce, 0xff,
	0xcf, 0xf8, 0xe5, 0x02, 0xdb, 0xde, 0x79, 0xa9, 0x8c, 0xbc, 0x92, 0x11, 0x37, 0x52, 0x25, 0x76,
	0x3b, 0x5a, 0x46, 0x37, 0xdb, 0xd1, 0x32, 0xc2, 0x07, 0x30, 0x88, 0x54, 0x22, 0x64, 0xd6, 0x92,
	0x1b, 0x1c, 0x84, 0x37, 0x05, 0x7c, 0x03, 0xbb, 0x54, 0x4c, 0x1b, 0x7a, 0x87, 0x5e, 0x6b, 0x65,
	0x1b, 0x14, 0x5e, 0x40, 0x5f, 0xf3, 0x75, 0xac, 0xb8, 0x18, 0x76, 0x73, 0x6b, 0x27, 0x75, 0x04,
	0xff, 0x0a, 0x0e, 0x3e, 0x5b, 0x5c, 0x58, 0x12, 0xf8, 0x07, 0xd0, 0x2f, 0x6a, 0x88, 0xd0, 0xfd,
	0x9e, 0xaa, 0xf2, 0xa5, 0xf3, 0xef, 0xf1, 0x6f, 0x07, 0x60, 0xa2, 0xf5, 0xd4, 0x86, 0x14, 0xbf,
	0xc0, 0x7e, 0xe5, 0xbb, 0xe3, 0xa3, 0x3a, 0x15, 0x13, 0xad, 0xfd, 0xbb, 0x81, 0xcd, 0x75, 0x50,
	0xe6, 0x3a, 0x38, 0xcd, 0x72, 0xcd, 0x3a, 0x19, 0xef, 0x59, 0x25, 0x6f, 0x05, 0xcc, 0x6f, 0x9a,
	0xc7, 0x3a, 0xe3, 0x3f, 0x0e, 0x3c, 0xa9, 0x5f, 0x6b, 0xe9, 0xec, 0x03, 0x78, 0x53, 0x32, 0xf8,
	0xd4, 0x72, 0x36, 0x86, 0xbb, 0xc6, 0xcb, 0x25, 0xf4, 0x6c, 0x3c, 0xf1, 0x99, 0x25, 0x6b, 0x13,
	0xd6, 0x1a, 0xbe, 0x57, 0xe0, 0x9d, 0x91, 0xc1, 0xcd, 0x0f, 0xe4, 0xb7, 0x8a, 0x0b, 0xeb, 0x9c,
	0x38, 0xe3, 0x05, 0x1c, 0x6c, 0xef, 0x2a, 0x5d, 0x5f, 0x40, 0x77, 0x4a, 0x89, 0xc0, 0xe3, 0xb6,
	0x01, 0xaa, 0xd6, 0x39, 0xeb, 0xe5, 0x95, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xba, 0xc0,
	0x55, 0xd7, 0xd8, 0x04, 0x00, 0x00,
}
